#ifndef RRT_PLANNER__RRT_PLANNER_HPP
#define RRT_PLANNER__RRT_PLANNER_HPP

#include <memory>
#include <vector>
#include <string>
#include <mutex>

#include "nav2_core/global_planner.hpp"
#include "nav_msgs/msg/path.hpp"
#include "nav_msgs/srv/get_plan.hpp"
#include "geometry_msgs/msg/pose_stamped.hpp"
#include "geometry_msgs/msg/point.hpp"
#include "std_msgs/msg/color_rgba.hpp"
#include "std_msgs/msg/header.hpp"
#include "visualization_msgs/msg/marker.hpp"
#include "nav2_util/lifecycle_node.hpp"
#include "nav2_util/node_utils.hpp"
#include "tf2/utils.h"
#include "rcl_interfaces/msg/set_parameters_result.hpp"
#include "nav2_costmap_2d/costmap_2d_ros.hpp"
#include "nav2_costmap_2d/costmap_2d.hpp"
#include "rclcpp_lifecycle/lifecycle_node.hpp"
#include "planner_core.hpp"

namespace rrt_planner
{
class RRTPlanner : public nav2_core::GlobalPlanner
{
public:
  /**
   * @brief  Constructor(default)
   */
  RRTPlanner();

  /**
   * @brief Configuring plugin
   * @param parent Lifecycle node pointer
   * @param name Name of plugin map
   * @param tf Shared ptr of TF2 buffer
   * @param costmap_ros Costmap2DROS object
   */
  ~RRTPlanner() = default;

  /**
   * @brief  Planner initialization
   * @param  name         planner name
   * @param  costmapRos   costmap ROS wrapper
   */
  void configure(
    const rclcpp_lifecycle::LifecycleNode::WeakPtr & parent,
    std::string name, std::shared_ptr<tf2_ros::Buffer> tf,
    std::shared_ptr<nav2_costmap_2d::Costmap2DROS> costmap_ros) override;

  /**
   * @brief Cleanup lifecycle node
   */
  void cleanup() override;

  /**
   * @brief Activate lifecycle node
   */
  void activate() override;

  /**
   * @brief Deactivate lifecycle node
   */
  void deactivate() override;

  /**
   * @brief Creating a plan from start and goal poses
   * @param start Start pose
   * @param goal Goal pose
   * @return nav2_msgs::Path of the generated path
   */
  nav_msgs::msg::Path createPlan(
    const geometry_msgs::msg::PoseStamped & start,
    const geometry_msgs::msg::PoseStamped & goal) override;

protected:

  /**
   * @brief  publish planning path
   * @param  path planning path
   */
  void publishPlan(const nav_msgs::msg::Path& plan);
  
  // bool makePlanService(
  //   const std::shared_ptr<rmw_request_id_t> request_header,
  //   const std::shared_ptr<nav_msgs::srv::GetPlan::Request> request,
  //   std::shared_ptr<nav_msgs::srv::GetPlan::Response> response); 
  /**
   * @brief  calculate plan from planning path
   * @param  path path generated by global planner
   * @param  plan plan transfromed from path
   * @return bool true if successful else false
   */
  bool _getPlanFromPath(std::vector<Node> path, nav_msgs::msg::Path& plan);

  /**
   * @brief  publish expand zone
   * @param  expand  set of expand nodes
   */
  void _publishExpand(std::vector<Node>& expand);

  /**
   *  @brief Publishes a Marker msg with two points in Rviz
   *  @param line_msg Pointer to existing marker object.
   *  @param line_pub Pointer to existing marker Publisher.
   *  @param id first marker id
   *  @param pid second marker id
   */
  void _pubLine(
    visualization_msgs::msg::Marker& line_msg,
    rclcpp::Publisher<visualization_msgs::msg::Marker>::SharedPtr line_pub,
    int id, int pid);

protected:
  // TF buffer
  std::shared_ptr<tf2_ros::Buffer> tf_;

  // node ptr
  nav2_util::LifecycleNode::SharedPtr node_;

  // Global Costmap
  nav2_costmap_2d::Costmap2D * costmap_;

  // The global frame of the costmap
  std::string frame_id_, name_;                                    
  rclcpp::Publisher<nav_msgs::msg::Path>::SharedPtr plan_pub_;
  bool initialized_;                                          // initialization flag
  std::shared_ptr<planner_core::PlannerCore> g_planner_;  // global graph planner
  rclcpp::Publisher<visualization_msgs::msg::Marker>::SharedPtr expand_pub_;// nodes explorer publisher                        // planning service
  // rclcpp::Service<nav_msgs::srv::GetPlan>::SharedPtr make_plan_srv_;

private:
  double tolerance_;                                      // tolerance
  bool is_outline_;                                       // whether outline the boudary of map
  double factor_;                                         // obstacle inflation factor
  bool is_expand_;                                        // whether publish expand map or not
  nav_msgs::msg::Path history_plan_;  // history plan
};
}  // namespace rrt_planner
#endif