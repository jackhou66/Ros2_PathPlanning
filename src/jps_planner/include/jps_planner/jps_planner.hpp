/**
 * *********************************************************
 *
 * @file: graph_planner.h
 * @brief: Contains the graph planner ROS wrapper class
 * @author: Yang Haodong
 * @date: 2023-10-26
 * @version: 1.0
 *
 * Copyright (c) 2024, Yang Haodong.
 * All rights reserved.
 *
 * --------------------------------------------------------
 *
 * ********************************************************
 */
#ifndef JPS_PLANNER_HPP
#define JPS_PLANNER_HPP

#include <memory>
#include <string>
#include <vector>

#include <rclcpp/rclcpp.hpp>
#include <rclcpp_lifecycle/lifecycle_node.hpp>
#include <nav2_core/global_planner.hpp>
#include <geometry_msgs/msg/pose_stamped.hpp>
#include <nav_msgs/srv/get_plan.hpp>

#include "nav_msgs/msg/occupancy_grid.hpp"
#include "geometry_msgs/msg/point.hpp"
// #include "std_msgs/msg/color_rgba.hpp"
// #include "std_msgs/msg/header.hpp"
#include "visualization_msgs/msg/marker.hpp"
#include "nav2_util/lifecycle_node.hpp"
#include "nav2_util/node_utils.hpp"
#include "planner_core.hpp"

// #include "dynamicvoronoi.h"

namespace jps_planner
{
class JPSPlanner : public nav2_core::GlobalPlanner
{
public:
  /**
   * @brief Construct a new Graph Planner object
   */
  JPSPlanner();

  // /**
  //  * @brief Construct a new Graph Planner object
  //  * @param name        planner name
  //  * @param costmap_ros the cost map to use for assigning costs to trajectories
  //  */
  // GraphPlanner(std::string name, costmap_2d::Costmap2DROS* costmap_ros);

  /**
   * @brief Destroy the Graph Planner object
   */
  ~JPSPlanner() = default;

/**
   * @brief Configures the planner
   * @param parent  Weak pointer to the parent node
   * @param name    Name of the planner
   * @param tf      TF buffer
   * @param costmap_ros Costmap ROS wrapper
   */
  void configure(
    const rclcpp_lifecycle::LifecycleNode::WeakPtr & parent,
    std::string name, std::shared_ptr<tf2_ros::Buffer> tf,
    std::shared_ptr<nav2_costmap_2d::Costmap2DROS> costmap_ros) override;

  /**
   * @brief Cleans up the planner
   */
  void cleanup() override;

  /**
   * @brief Activates the planner
   */
  void activate() override;

  /**
   * @brief Deactivates the planner
   */
  void deactivate() override;

  /**
   * @brief Plan a path given start and goal in world map
   * @param start start in world map
   * @param goal  goal in world map
   * @return path in world map
   */
  nav_msgs::msg::Path createPlan(
    const geometry_msgs::msg::PoseStamped & start,
    const geometry_msgs::msg::PoseStamped & goal) override;
  
//   /**
//    * @brief Regeister planning service
//    * @param req  request from client
//    * @param resp response from server
//    */
//   bool makePlanService(nav_msgs::GetPlan::Request& req, nav_msgs::GetPlan::Response& resp);

protected:

  /**
   * @brief Publish planning path
   * @param path planning path
   */
  void publishPlan(const nav_msgs::msg::Path& plan);

  /**
   * @brief publish expand zone
   * @param expand set of expand nodes
   */
  void _publishExpand(std::vector<Node>& expand);

  /**
   * @brief Calculate plan from planning path
   * @param path path generated by global planner
   * @param plan plan transfromed from path, i.e. [start, ..., goal]
   * @return bool true if successful, else false
   */
  bool _getPlanFromPath(std::vector<Node>& path, nav_msgs::msg::Path& plan);

protected:

  bool initialized_;                                          // initialization flag
  // TF buffer
  std::shared_ptr<tf2_ros::Buffer> tf_;

  // node ptr
  nav2_util::LifecycleNode::SharedPtr node_;

  // Global Costmap
  nav2_costmap_2d::Costmap2D * costmap_;

  // The global frame of the costmap
  std::string frame_id_;                                      // costmap frame ID
  // std::string planner_name_;                                  // planner name
  std::shared_ptr<planner_core::PlannerCore> g_planner_;  // global graph planner
  rclcpp_lifecycle::LifecyclePublisher<nav_msgs::msg::Path>::SharedPtr plan_pub_;                                 // path planning publisher
  rclcpp_lifecycle::LifecyclePublisher<nav_msgs::msg::OccupancyGrid>::SharedPtr expand_pub_;                                // nodes explorer publisher
  // rclcpp::Service<nav_msgs::srv::GetPlan>::SharedPtr make_plan_srv_;                         // planning service

private:
  bool is_outline_;         // whether outline the boudary of map
  bool is_expand_;          // whether publish expand map or not
  // bool is_voronoi_map_;     // whether to store Voronoi map or not
  double tolerance_;        // tolerance
  double factor_;           // obstacle inflation factor
  // DynamicVoronoi voronoi_;  // dynamic voronoi map
};
}  // namespace jps_planner
#endif